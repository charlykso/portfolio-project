[
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "models.address",
        "description": "models.address",
        "isExtraImport": true,
        "detail": "models.address",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "models.address",
        "description": "models.address",
        "isExtraImport": true,
        "detail": "models.address",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "models.address",
        "description": "models.address",
        "isExtraImport": true,
        "detail": "models.address",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "app_views",
        "importPath": "api.v1.views",
        "description": "api.v1.views",
        "isExtraImport": true,
        "detail": "api.v1.views",
        "documentation": {}
    },
    {
        "label": "app_views",
        "importPath": "api.v1.views",
        "description": "api.v1.views",
        "isExtraImport": true,
        "detail": "api.v1.views",
        "documentation": {}
    },
    {
        "label": "app_views",
        "importPath": "api.v1.views",
        "description": "api.v1.views",
        "isExtraImport": true,
        "detail": "api.v1.views",
        "documentation": {}
    },
    {
        "label": "app_views",
        "importPath": "api.v1.views",
        "description": "api.v1.views",
        "isExtraImport": true,
        "detail": "api.v1.views",
        "documentation": {}
    },
    {
        "label": "app_views",
        "importPath": "api.v1.views",
        "description": "api.v1.views",
        "isExtraImport": true,
        "detail": "api.v1.views",
        "documentation": {}
    },
    {
        "label": "app_views",
        "importPath": "api.v1.views",
        "description": "api.v1.views",
        "isExtraImport": true,
        "detail": "api.v1.views",
        "documentation": {}
    },
    {
        "label": "app_views",
        "importPath": "api.v1.views",
        "description": "api.v1.views",
        "isExtraImport": true,
        "detail": "api.v1.views",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "models.property",
        "description": "models.property",
        "isExtraImport": true,
        "detail": "models.property",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "models.property",
        "description": "models.property",
        "isExtraImport": true,
        "detail": "models.property",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "models.property",
        "description": "models.property",
        "isExtraImport": true,
        "detail": "models.property",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "models.property",
        "description": "models.property",
        "isExtraImport": true,
        "detail": "models.property",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "models.property",
        "description": "models.property",
        "isExtraImport": true,
        "detail": "models.property",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "models.property",
        "description": "models.property",
        "isExtraImport": true,
        "detail": "models.property",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "models.property_img",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models.property_img",
        "description": "models.property_img",
        "detail": "models.property_img",
        "documentation": {}
    },
    {
        "label": "Property_img",
        "importPath": "models.property_img",
        "description": "models.property_img",
        "isExtraImport": true,
        "detail": "models.property_img",
        "documentation": {}
    },
    {
        "label": "Property_img",
        "importPath": "models.property_img",
        "description": "models.property_img",
        "isExtraImport": true,
        "detail": "models.property_img",
        "documentation": {}
    },
    {
        "label": "Property_img",
        "importPath": "models.property_img",
        "description": "models.property_img",
        "isExtraImport": true,
        "detail": "models.property_img",
        "documentation": {}
    },
    {
        "label": "Property_img",
        "importPath": "models.property_img",
        "description": "models.property_img",
        "isExtraImport": true,
        "detail": "models.property_img",
        "documentation": {}
    },
    {
        "label": "requests,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests.",
        "description": "requests.",
        "detail": "requests.",
        "documentation": {}
    },
    {
        "label": "checkUser",
        "importPath": "api.v1.collectives",
        "description": "api.v1.collectives",
        "isExtraImport": true,
        "detail": "api.v1.collectives",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Swagger",
        "importPath": "flasgger",
        "description": "flasgger",
        "isExtraImport": true,
        "detail": "flasgger",
        "documentation": {}
    },
    {
        "label": "swag_from",
        "importPath": "flasgger.utils",
        "description": "flasgger.utils",
        "isExtraImport": true,
        "detail": "flasgger.utils",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "scoped_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "json,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json.",
        "description": "json.",
        "detail": "json.",
        "documentation": {}
    },
    {
        "label": "CheckEmail",
        "importPath": "web_dynamic.collective.checkEmail",
        "description": "web_dynamic.collective.checkEmail",
        "isExtraImport": true,
        "detail": "web_dynamic.collective.checkEmail",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "api.v1.collectives.checkUser",
        "description": "api.v1.collectives.checkUser",
        "peekOfCode": "def get_user(cls, user_id):\n    \"\"\"to get user details\"\"\"\n    # new_list = []\n    key = \"User.\" + str(user_id)\n    if user_id is None:\n        abort(400, \"Missing user id\")\n    elif key in storage.all(cls).keys():\n        return storage.all(cls)[key].to_dict()\n    else:\n        abort(404)",
        "detail": "api.v1.collectives.checkUser",
        "documentation": {}
    },
    {
        "label": "get_address_for_a_user",
        "kind": 2,
        "importPath": "api.v1.views.addresses",
        "description": "api.v1.views.addresses",
        "peekOfCode": "def get_address_for_a_user(user_id=None):\n    \"\"\"\n    get a address that is associated to a user\n    \"\"\"\n    user = storage.get(User, user_id)\n    if user is None:\n        abort(404)\n    new_list = []\n    for address in user.addresses:\n        new_list.append(address.to_dict())",
        "detail": "api.v1.views.addresses",
        "documentation": {}
    },
    {
        "label": "get_all_addresses",
        "kind": 2,
        "importPath": "api.v1.views.addresses",
        "description": "api.v1.views.addresses",
        "peekOfCode": "def get_all_addresses(address_id=None):\n    \"\"\"\n    get all addresses\n    or get any address with the address_id that is passed\n    \"\"\"\n    new_list = []\n    key = \"Address.\" + str(address_id)\n    if address_id is None:\n        objs = storage.all(Address)\n        for key, value in objs.items():",
        "detail": "api.v1.views.addresses",
        "documentation": {}
    },
    {
        "label": "delete_address",
        "kind": 2,
        "importPath": "api.v1.views.addresses",
        "description": "api.v1.views.addresses",
        "peekOfCode": "def delete_address(address_id=None):\n    \"\"\"\n    delete any address that the address_id is passed\n    \"\"\"\n    address = storage.get(Address, address_id)\n    if address is None:\n        abort(404)\n    address.delete()\n    storage.save()\n    return jsonify({}), 200",
        "detail": "api.v1.views.addresses",
        "documentation": {}
    },
    {
        "label": "create_address",
        "kind": 2,
        "importPath": "api.v1.views.addresses",
        "description": "api.v1.views.addresses",
        "peekOfCode": "def create_address(user_id=None):\n    \"\"\"\n    create a new address for a user\n    by passing th user id\n    \"\"\"\n    if storage.get(User, user_id) is None:\n        abort(404)\n    if not request.get_json():\n        abort(400, \"Not a JSON\")\n    if \"country\" not in request.get_json():",
        "detail": "api.v1.views.addresses",
        "documentation": {}
    },
    {
        "label": "update_address",
        "kind": 2,
        "importPath": "api.v1.views.addresses",
        "description": "api.v1.views.addresses",
        "peekOfCode": "def update_address(address_id=None):\n    \"\"\"\n    update any users address by passing the address id\n    \"\"\"\n    address = storage.get(Address, address_id)\n    if address is None:\n        abort(404)\n    key = \"Address.\" + str(address_id)\n    if key not in storage.all(Address).keys():\n        abort(404)",
        "detail": "api.v1.views.addresses",
        "documentation": {}
    },
    {
        "label": "status",
        "kind": 2,
        "importPath": "api.v1.views.index",
        "description": "api.v1.views.index",
        "peekOfCode": "def status():\n    \"\"\"API status\"\"\"\n    return jsonify({\"status\": \"OK\"})\n@app_views.route('/stats', methods=['GET'], strict_slashes=False)\ndef obj_count():\n    \"\"\"retrieve number of objects by type\"\"\"\n    obj_count = {}\n    for key, value in classes.items():\n        obj_count[key] = storage.count(value)\n    return jsonify(obj_count)",
        "detail": "api.v1.views.index",
        "documentation": {}
    },
    {
        "label": "obj_count",
        "kind": 2,
        "importPath": "api.v1.views.index",
        "description": "api.v1.views.index",
        "peekOfCode": "def obj_count():\n    \"\"\"retrieve number of objects by type\"\"\"\n    obj_count = {}\n    for key, value in classes.items():\n        obj_count[key] = storage.count(value)\n    return jsonify(obj_count)\nif __name__ == '__main__':\n    pass",
        "detail": "api.v1.views.index",
        "documentation": {}
    },
    {
        "label": "classes",
        "kind": 5,
        "importPath": "api.v1.views.index",
        "description": "api.v1.views.index",
        "peekOfCode": "classes = {\n           \"addresses\": Address,\n           \"properties\": Property,\n           \"reviews\": Review,\n           \"property_imgs\": Property_img,\n           \"users\": User,\n           }\n@app_views.route('/status', methods=['GET'], strict_slashes=False)\ndef status():\n    \"\"\"API status\"\"\"",
        "detail": "api.v1.views.index",
        "documentation": {}
    },
    {
        "label": "get_images_for_a_property",
        "kind": 2,
        "importPath": "api.v1.views.property_imgs",
        "description": "api.v1.views.property_imgs",
        "peekOfCode": "def get_images_for_a_property(property_id=None):\n    \"\"\"\n    get all images for a property\n    \"\"\"\n    new_list = []\n    property = storage.get(Property, property_id)\n    if property is None:\n        abort(404)\n    for image in property.property_imgs:\n        new_list.append(image.to_dict())",
        "detail": "api.v1.views.property_imgs",
        "documentation": {}
    },
    {
        "label": "get_all_images",
        "kind": 2,
        "importPath": "api.v1.views.property_imgs",
        "description": "api.v1.views.property_imgs",
        "peekOfCode": "def get_all_images(image_id=None):\n    \"\"\"\n    get all images\n    or get any image with the propertyImg_id that is passed\n    \"\"\"\n    new_list = []\n    key = \"Property_img.\" + str(image_id)\n    if image_id is None:\n        objs = storage.all(Property_img)\n        for key, value in objs.items():",
        "detail": "api.v1.views.property_imgs",
        "documentation": {}
    },
    {
        "label": "delete_image",
        "kind": 2,
        "importPath": "api.v1.views.property_imgs",
        "description": "api.v1.views.property_imgs",
        "peekOfCode": "def delete_image(image_id=None):\n    \"\"\"\n    delete any image by passing the propertyImg_id\n    \"\"\"\n    image = storage.get(Property_img, image_id)\n    if image is None:\n        abort(404)\n    image.delete()\n    storage.save()\n    return jsonify({}), 200",
        "detail": "api.v1.views.property_imgs",
        "documentation": {}
    },
    {
        "label": "create_image",
        "kind": 2,
        "importPath": "api.v1.views.property_imgs",
        "description": "api.v1.views.property_imgs",
        "peekOfCode": "def create_image(property_id=None):\n    \"\"\"\n    create a new image for a property\n    by passing the property id\n    \"\"\"\n    if storage.get(Property, request.get_json()[\"property_id\"]) is None:\n        abort(404)\n    if not request.get_json():\n        abort(400, \"Not a JSON\")\n    if \"img_path\" not in request.get_json():",
        "detail": "api.v1.views.property_imgs",
        "documentation": {}
    },
    {
        "label": "update_images",
        "kind": 2,
        "importPath": "api.v1.views.property_imgs",
        "description": "api.v1.views.property_imgs",
        "peekOfCode": "def update_images(image_id=None):\n    \"\"\"\n    update any image by passing the property_img id\n    \"\"\"\n    image = storage.get(Property_img, image_id)\n    if image is None:\n        abort(404)\n    key = \"Property_img.\" + str(image_id)\n    if key not in storage.all(Property_img).keys():\n        abort(404)",
        "detail": "api.v1.views.property_imgs",
        "documentation": {}
    },
    {
        "label": "get_reviews_for_a_property",
        "kind": 2,
        "importPath": "api.v1.views.property_reviews",
        "description": "api.v1.views.property_reviews",
        "peekOfCode": "def get_reviews_for_a_property(property_id=None):\n    \"\"\"\n    get all reviews that is associated to a property\n    \"\"\"\n    property = storage.get(Property, property_id)\n    if property is None:\n        abort(404)\n    new_list = []\n    for review in property.reviews:\n        new_list.append(review.to_dict())",
        "detail": "api.v1.views.property_reviews",
        "documentation": {}
    },
    {
        "label": "get_review",
        "kind": 2,
        "importPath": "api.v1.views.property_reviews",
        "description": "api.v1.views.property_reviews",
        "peekOfCode": "def get_review(review_id=None):\n    \"\"\"\n    retrieve one review\n    \"\"\"\n    review = storage.get(Review, review_id)\n    if review is None:\n        abort(404)\n    return jsonify(review.to_dict())\n@app_views.route(\"/reviews/<review_id>\", methods=['DELETE'],\n                 strict_slashes=False)",
        "detail": "api.v1.views.property_reviews",
        "documentation": {}
    },
    {
        "label": "delete_review",
        "kind": 2,
        "importPath": "api.v1.views.property_reviews",
        "description": "api.v1.views.property_reviews",
        "peekOfCode": "def delete_review(review_id=None):\n    \"\"\"\n    delete a review that the id was passed\n    \"\"\"\n    review = storage.get(Review, review_id)\n    if review is None:\n        abort(404)\n    review.delete()\n    storage.save()\n    return jsonify({}), 200",
        "detail": "api.v1.views.property_reviews",
        "documentation": {}
    },
    {
        "label": "create_review",
        "kind": 2,
        "importPath": "api.v1.views.property_reviews",
        "description": "api.v1.views.property_reviews",
        "peekOfCode": "def create_review(property_id=None):\n    \"\"\"\n    create a review for a property\n    by using the property_id to select the property\n    \"\"\"\n    if storage.get(Property, property_id) is None:\n        abort(404)\n    if not request.get_json():\n        abort(400, \"Not a JSON\")\n    if \"property_id\" not in request.get_json():",
        "detail": "api.v1.views.property_reviews",
        "documentation": {}
    },
    {
        "label": "update_review",
        "kind": 2,
        "importPath": "api.v1.views.property_reviews",
        "description": "api.v1.views.property_reviews",
        "peekOfCode": "def update_review(review_id=None):\n    \"\"\"\n    update a review\n    by passing the review_id\n    \"\"\"\n    key = \"Review.\" + str(review_id)\n    if key not in storage.all(Review).keys():\n        abort(404)\n    review = storage.get(Review, review_id)\n    if review is None:",
        "detail": "api.v1.views.property_reviews",
        "documentation": {}
    },
    {
        "label": "get_properties_for_a_user",
        "kind": 2,
        "importPath": "api.v1.views.user_properties",
        "description": "api.v1.views.user_properties",
        "peekOfCode": "def get_properties_for_a_user(user_id=None):\n    \"\"\"\n    get all properties that is associated to a user\n    \"\"\"\n    user = storage.get(User, user_id)\n    if user is None:\n        abort(404)\n    new_list = []\n    for property in user.properties:\n        new_list.append(property.to_dict())",
        "detail": "api.v1.views.user_properties",
        "documentation": {}
    },
    {
        "label": "get_property",
        "kind": 2,
        "importPath": "api.v1.views.user_properties",
        "description": "api.v1.views.user_properties",
        "peekOfCode": "def get_property(property_id=None):\n    \"\"\"\n    retrieve one or all properties\n    \"\"\"\n    new_list = []\n    key = \"Property.\" + str(property_id)\n    if property_id is None:\n        objs = storage.all(Property)\n        for key, value in objs.items():\n            new_list.append(value.to_dict())",
        "detail": "api.v1.views.user_properties",
        "documentation": {}
    },
    {
        "label": "delete_property",
        "kind": 2,
        "importPath": "api.v1.views.user_properties",
        "description": "api.v1.views.user_properties",
        "peekOfCode": "def delete_property(property_id=None):\n    \"\"\"\n    delete a property that the id was passed\n    \"\"\"\n    property = storage.get(Property, property_id)\n    if property is None:\n        abort(404)\n    property.delete()\n    storage.save()\n    return jsonify({}), 200",
        "detail": "api.v1.views.user_properties",
        "documentation": {}
    },
    {
        "label": "create_property",
        "kind": 2,
        "importPath": "api.v1.views.user_properties",
        "description": "api.v1.views.user_properties",
        "peekOfCode": "def create_property(user_id=None):\n    \"\"\"\n    create a property for a user\n    by using the user_id to select the user\n    \"\"\"\n    propertyUrl = \"http://0.0.0.0:5004/api/v1/property/\"\n    userUrl = \"http://127.0.0.1:5004/api/v1/owners/\"\n    if storage.get(User, user_id) is None:\n        abort(404)\n    if not request.get_json():",
        "detail": "api.v1.views.user_properties",
        "documentation": {}
    },
    {
        "label": "update_property",
        "kind": 2,
        "importPath": "api.v1.views.user_properties",
        "description": "api.v1.views.user_properties",
        "peekOfCode": "def update_property(property_id=None):\n    \"\"\"\n    update a property\n    by passing the property_id\n    \"\"\"\n    key = \"Property.\" + str(property_id)\n    if key not in storage.all(Property).keys():\n        abort(404)\n    property = storage.get(Property, property_id)\n    if property is None:",
        "detail": "api.v1.views.user_properties",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "api.v1.views.users",
        "description": "api.v1.views.users",
        "peekOfCode": "def get_users(user_id=None):\n    \"\"\"\n    get all users\n    or get any user with the user_id that is passed\n    \"\"\"\n    new_list = []\n    key = \"User.\" + str(user_id)\n    if user_id is None:\n        objs = storage.all(User)\n        for key, value in objs.items():",
        "detail": "api.v1.views.users",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "api.v1.views.users",
        "description": "api.v1.views.users",
        "peekOfCode": "def delete_user(user_id=None):\n    \"\"\"\n    delete any user that the user_id is passed\n    \"\"\"\n    user = storage.get(User, user_id)\n    if user is None:\n        abort(404)\n    user.delete()\n    storage.save()\n    return jsonify({}), 200",
        "detail": "api.v1.views.users",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "api.v1.views.users",
        "description": "api.v1.views.users",
        "peekOfCode": "def create_user():\n    \"\"\"\n    create a new user\n    \"\"\"\n    if not request.get_json():\n        abort(400, \"Not a JSON\")\n    if \"email\" not in request.get_json():\n        abort(400, \"Missing email\")\n    if \"firstname\" not in request.get_json():\n        abort(400, \"Missing firstname\")",
        "detail": "api.v1.views.users",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "api.v1.views.users",
        "description": "api.v1.views.users",
        "peekOfCode": "def update_user(user_id=None):\n    \"\"\"\n    update any user the id is passed\n    \"\"\"\n    user = storage.get(User, user_id)\n    if user is None:\n        abort(404)\n    key = \"User.\" + str(user_id)\n    if key not in storage.all(User).keys():\n        abort(404)",
        "detail": "api.v1.views.users",
        "documentation": {}
    },
    {
        "label": "close_db",
        "kind": 2,
        "importPath": "api.v1.app",
        "description": "api.v1.app",
        "peekOfCode": "def close_db(error):\n    \"\"\" Close Storage \"\"\"\n    storage.close()\n@app.errorhandler(404)\ndef not_found(error):\n    \"\"\" 404 Error\n    ---\n    responses:\n      404:\n        description: a resource was not found",
        "detail": "api.v1.app",
        "documentation": {}
    },
    {
        "label": "not_found",
        "kind": 2,
        "importPath": "api.v1.app",
        "description": "api.v1.app",
        "peekOfCode": "def not_found(error):\n    \"\"\" 404 Error\n    ---\n    responses:\n      404:\n        description: a resource was not found\n    \"\"\"\n    return make_response(jsonify({'error': \"Not found\"}), 404)\napp.config['SWAGGER'] = {\n    'title': 'Authentified Restful API',",
        "detail": "api.v1.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.v1.app",
        "description": "api.v1.app",
        "peekOfCode": "app = Flask(__name__)\napp.config['JSONIFY_PRETTYPRINT_REGULAR'] = True\napp.register_blueprint(app_views)\ncors = CORS(app, resources={r\"/api/v1/*\": {\"origins\": \"*\"}})\n@app.teardown_appcontext\ndef close_db(error):\n    \"\"\" Close Storage \"\"\"\n    storage.close()\n@app.errorhandler(404)\ndef not_found(error):",
        "detail": "api.v1.app",
        "documentation": {}
    },
    {
        "label": "app.config['JSONIFY_PRETTYPRINT_REGULAR']",
        "kind": 5,
        "importPath": "api.v1.app",
        "description": "api.v1.app",
        "peekOfCode": "app.config['JSONIFY_PRETTYPRINT_REGULAR'] = True\napp.register_blueprint(app_views)\ncors = CORS(app, resources={r\"/api/v1/*\": {\"origins\": \"*\"}})\n@app.teardown_appcontext\ndef close_db(error):\n    \"\"\" Close Storage \"\"\"\n    storage.close()\n@app.errorhandler(404)\ndef not_found(error):\n    \"\"\" 404 Error",
        "detail": "api.v1.app",
        "documentation": {}
    },
    {
        "label": "cors",
        "kind": 5,
        "importPath": "api.v1.app",
        "description": "api.v1.app",
        "peekOfCode": "cors = CORS(app, resources={r\"/api/v1/*\": {\"origins\": \"*\"}})\n@app.teardown_appcontext\ndef close_db(error):\n    \"\"\" Close Storage \"\"\"\n    storage.close()\n@app.errorhandler(404)\ndef not_found(error):\n    \"\"\" 404 Error\n    ---\n    responses:",
        "detail": "api.v1.app",
        "documentation": {}
    },
    {
        "label": "app.config['SWAGGER']",
        "kind": 5,
        "importPath": "api.v1.app",
        "description": "api.v1.app",
        "peekOfCode": "app.config['SWAGGER'] = {\n    'title': 'Authentified Restful API',\n    'uiversion': 1\n}\nSwagger(app)\nif __name__ == \"__main__\":\n    \"\"\" Main Function \"\"\"\n    host = environ.get('AUTH_API_HOST')\n    port = environ.get('AUTH_API_PORT')\n    if not host:",
        "detail": "api.v1.app",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "kind": 6,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "class DBStorage:\n    \"\"\"interaacts with the MySQL database\"\"\"\n    __engine = None\n    __session = None\n    def __init__(self):\n        \"\"\"Instantiate a DBStorage object\"\"\"\n        AUTH_MYSQL_USER = getenv('AUTH_MYSQL_USER')\n        AUTH_MYSQL_PWD = getenv('AUTH_MYSQL_PWD')\n        AUTH_MYSQL_HOST = getenv('AUTH_MYSQL_HOST')\n        AUTH_MYSQL_DB = getenv('AUTH_MYSQL_DB')",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "classes",
        "kind": 5,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "classes = {\"Property\": Property, \"Property_img\": Property_img,\n           \"Address\": Address, \"Review\": Review, \"User\": User}\nclass DBStorage:\n    \"\"\"interaacts with the MySQL database\"\"\"\n    __engine = None\n    __session = None\n    def __init__(self):\n        \"\"\"Instantiate a DBStorage object\"\"\"\n        AUTH_MYSQL_USER = getenv('AUTH_MYSQL_USER')\n        AUTH_MYSQL_PWD = getenv('AUTH_MYSQL_PWD')",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "models.address",
        "description": "models.address",
        "peekOfCode": "class Address(BaseModel, Base):\n    \"\"\"Representation of Address \"\"\"\n    __tablename__ = 'addresses'\n    country = Column(String(128), nullable=False)\n    state = Column(String(128), nullable=False)\n    city = Column(String(128), nullable=False)\n    street = Column(String(128), nullable=False)\n    landmark = Column(String(128), nullable=False)\n    user_id = Column(String(60), ForeignKey('users.id'), nullable=False)\n    def __init__(self, *args, **kwargs):",
        "detail": "models.address",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "class BaseModel:\n    \"\"\"The BaseModel class from which future classes will be derived\"\"\"\n    id = Column(String(60), primary_key=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow)\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initialization of the base model\"\"\"\n        if kwargs:\n            for key, value in kwargs.items():\n                if key != \"__class__\":",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 5,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "time = \"%Y-%m-%dT%H:%M:%S.%f\"\nBase = declarative_base()\nclass BaseModel:\n    \"\"\"The BaseModel class from which future classes will be derived\"\"\"\n    id = Column(String(60), primary_key=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow)\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initialization of the base model\"\"\"\n        if kwargs:",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "Base = declarative_base()\nclass BaseModel:\n    \"\"\"The BaseModel class from which future classes will be derived\"\"\"\n    id = Column(String(60), primary_key=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow)\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initialization of the base model\"\"\"\n        if kwargs:\n            for key, value in kwargs.items():",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Property",
        "kind": 6,
        "importPath": "models.property",
        "description": "models.property",
        "peekOfCode": "class Property(BaseModel, Base):\n    \"\"\"Representation of property \"\"\"\n    __tablename__ = 'properties'\n    gen_property_id = Column(String(60), nullable=False)\n    status = Column(String(20), nullable=False)\n    description = Column(String(255), nullable=False)\n    state = Column(String(128), nullable=False)\n    availability = Column(String(20), nullable=False)\n    landmark = Column(String(200), nullable=True)\n    search_term = Column(String(255), nullable=False)",
        "detail": "models.property",
        "documentation": {}
    },
    {
        "label": "Property_img",
        "kind": 6,
        "importPath": "models.property_img",
        "description": "models.property_img",
        "peekOfCode": "class Property_img(BaseModel, Base):\n    \"\"\"Representation of Property_img \"\"\"\n    __tablename__ = 'property_imgs'\n    img_path = Column(String(255), nullable=False)\n    property_id = Column(String(60), ForeignKey('properties.id'), nullable=False)\n    def __init__(self, *args, **kwargs):\n        \"\"\"initializes property_img\"\"\"\n        super().__init__(*args, **kwargs)",
        "detail": "models.property_img",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "models.review",
        "description": "models.review",
        "peekOfCode": "class Review(BaseModel, Base):\n    \"\"\"Representation of Review \"\"\"\n    __tablename__ = 'reviews'\n    rate = Column(Integer, nullable=False)\n    property_id = Column(String(60), ForeignKey('properties.id'), nullable=False)\n    text = Column(String(1024), nullable=False)\n    def __init__(self, *args, **kwargs):\n        \"\"\"initializes Review\"\"\"\n        super().__init__(*args, **kwargs)",
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.user",
        "description": "models.user",
        "peekOfCode": "class User(BaseModel, Base):\n    \"\"\"Representation of a user \"\"\"\n    __tablename__ = 'users'\n    email = Column(String(128), nullable=False)\n    password = Column(String(200), nullable=False)\n    firstname = Column(String(128), nullable=True)\n    lastname = Column(String(128), nullable=True)\n    gender = Column(String(10), nullable=False)\n    phone_no = Column(String(20), nullable=False)\n    properties = relationship(\"Property\",",
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "CheckEmail",
        "kind": 6,
        "importPath": "web_dynamic.collective.checkEmail",
        "description": "web_dynamic.collective.checkEmail",
        "peekOfCode": "class CheckEmail:\n    \"\"\"a class to check if email exists\"\"\"\n    def emailExists(email):\n        \"\"\"a method to check if email exists\"\"\"\n        key = \"User.\" +email\n        # users = storage.all(User)\n        for key, value in storage.all(User).items():\n            if value.email == email:\n                return True\n        return False",
        "detail": "web_dynamic.collective.checkEmail",
        "documentation": {}
    },
    {
        "label": "close_db",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def close_db(error):\n    \"\"\"Remove the current sqlalchemy session\"\"\"\n    storage.close()\n@app.route(\"/\", strict_slashes=False)\ndef index():\n    \"\"\"landing page\"\"\"\n    return render_template(\"index.html\", cache_id=uuid.uuid4)\n@app.route(\"/signup\", methods=['GET', 'POST'], strict_slashes=False)\ndef signup():\n    \"\"\"signup page\"\"\"",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def index():\n    \"\"\"landing page\"\"\"\n    return render_template(\"index.html\", cache_id=uuid.uuid4)\n@app.route(\"/signup\", methods=['GET', 'POST'], strict_slashes=False)\ndef signup():\n    \"\"\"signup page\"\"\"\n    msg=\"\"\n    if request.method == 'POST':\n        firstname = request.form['firstname']\n        lastname = request.form['lastname']",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def signup():\n    \"\"\"signup page\"\"\"\n    msg=\"\"\n    if request.method == 'POST':\n        firstname = request.form['firstname']\n        lastname = request.form['lastname']\n        email = request.form['email']\n        phone_no = request.form['phone_no']\n        gender = request.form['gender']\n        password = request.form['password']",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def login():\n    \"\"\"login page\"\"\"\n    msg=\"\"\n    email = request.form.get('email')\n    password = request.form.get('password')\n    if request.method == \"POST\":\n        if not email or not password:\n            msg = \"Please fill in correctly\"\n            return render_template('login.html', msg=msg)\n        users = storage.all(User)",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "buy",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def buy():\n    \"\"\"List of all properties\"\"\"\n    properties = storage.all(Property).values()\n    properties = sorted(properties, key=lambda k: k.description)\n    # for val in properties:\n        # for inval in val.property_imgs:\n        #     print(inval.img_path)\n    return render_template(\"buy.html\",\n                           properties=properties,\n                           cache_id=uuid.uuid4())",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "details",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def details(property_id):\n    \"\"\"Get the details of one property\"\"\"\n    property = storage.get(Property, property_id)\n    user = storage.get(User, property.user_id)\n    print(user)\n    # for val in property.property_imgs[:1]:\n    #     print(val.img_path)\n    return render_template(\"details.html\",\n                           property=property,\n                           user=user,",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "sell",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def sell():\n    \"\"\"sell page\"\"\"\n    msg=\"\"\n    err_msg = \"\"\n    args = request.args\n    if args is not None:\n        msg = args.get('msg')\n    if session['id']:\n        user_id = session['id']\n    if request.method == \"POST\":",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "uploadImages",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def uploadImages():\n    \"\"\"for property image upload\"\"\"\n    msg=''\n    err_msg = ' '\n    filepath = 'web_dynamic/static/images/property_images/{}'\n    if request.method == \"POST\":\n        if request.files is not None:\n            for image in request.files:\n                item = request.files[image].filename\n                request.files[image].save(filepath.format(item))",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "my_properties",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def my_properties(user_id):\n    \"\"\"List all the user properties\"\"\"\n    myProperties = []\n    properties = storage.all(Property).values()\n    for val in properties:\n        if val.user_id == user_id:\n            myProperties.append(val)\n    # for item in myProperties:\n        # print(item)\n    return render_template(\"my_properties.html\",",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def update(property_id):\n    \"\"\"Get the details of one property\"\"\"\n    property = storage.get(Property, property_id)\n    if property:\n        user = storage.get(User, property.user_id)\n        if request.method == \"POST\":\n            # print(property.search_term)\n            property.type = request.form['type']\n            property.status = request.form['status']\n            property.price = request.form['price']",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "delete_property",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def delete_property(property_id):\n    \"\"\"delete property by passing the id\"\"\"\n    msg=''\n    property = storage.get(Property, property_id)\n    if property is not None:\n        # property.delete()\n        # storage.save()\n        msg = \"Successful\"\n    else:\n        msg = \"Not Successful\"",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "search_proeprty",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def search_proeprty(search_word):\n    \"\"\"search a property\"\"\"\n    property_list = []\n    if search_word:\n        search_word = search_word.replace(\",\", \"\")\n        objs = storage.all(Property)\n        for key, value in objs.items():\n            search_sentence = value.search_term.replace(\",\", \"\")\n            search_word_list = search_sentence.split()\n            # print(search_sentence)",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "def logout():\n    session.pop('loggedin', None)\n    session.pop('id', None)\n    session.pop('firstname', None)\n    session.pop('lastname', None)\n    session.pop('email', None)\n    session.pop('cache_id', None)\n    return redirect(url_for('login'))\nif __name__ == \"__main__\":\n    \"\"\" Main Function \"\"\"",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = 'ABCabcDEFdef123456'\n@app.teardown_appcontext\ndef close_db(error):\n    \"\"\"Remove the current sqlalchemy session\"\"\"\n    storage.close()\n@app.route(\"/\", strict_slashes=False)\ndef index():\n    \"\"\"landing page\"\"\"\n    return render_template(\"index.html\", cache_id=uuid.uuid4)",
        "detail": "web_dynamic.app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "web_dynamic.app",
        "description": "web_dynamic.app",
        "peekOfCode": "app.secret_key = 'ABCabcDEFdef123456'\n@app.teardown_appcontext\ndef close_db(error):\n    \"\"\"Remove the current sqlalchemy session\"\"\"\n    storage.close()\n@app.route(\"/\", strict_slashes=False)\ndef index():\n    \"\"\"landing page\"\"\"\n    return render_template(\"index.html\", cache_id=uuid.uuid4)\n@app.route(\"/signup\", methods=['GET', 'POST'], strict_slashes=False)",
        "detail": "web_dynamic.app",
        "documentation": {}
    }
]